// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              String       @id @default(cuid())
  name            String?
  email           String?      @unique
  emailVerified   String? // 'yes' or 'no' or null; when waiting for verification, we store the verification token here (hence string)
  password        String?
  image           String?
  accounts        Account[]
  sessions        Session[]
  records         Record[]
  families        Family[]
  defaultFamily   Family       @relation("defaultFamily", fields: [defaultFamilyId], references: [id])
  defaultFamilyId String
  isAdmin         Boolean      @default(false)
  Person          Person[]
  Collection      Collection[]
}

model Family {
  id                    String                 @id @default(cuid())
  name                  String
  users                 User[]
  records               Record[]
  people                Person[]
  pronounSets           PronounSet[]
  indirectRelationships IndirectRelationship[]
  relationshipTypes     RelationshipType[]
  defaultUsers          User[]                 @relation("defaultFamily")
  collections           Collection[]
  File                  File[]
}

model File {
  id        String   @id @default(cuid())
  hash      String
  name      String
  mimeType  String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  record    Record?  @relation(fields: [recordId], references: [id], onDelete: Cascade)
  recordId  String?
  Person    Person[]
  caption   String?  @db.Text
  family    Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  familyId  String
}

model Record {
  id            String        @id @default(cuid())
  name          String
  description   String?       @db.Text
  type          String        @default("basic")
  userCreated   User          @relation(fields: [userCreatedId], references: [id])
  userCreatedId String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  RecordField   RecordField[]
  files         File[]
  family        Family        @relation(fields: [familyId], references: [id], onDelete: Cascade)
  familyId      String
  collections   Collection[]
  completed     Boolean       @default(false)
}

model RecordField {
  id       String @id @default(cuid())
  name     String
  value    String
  record   Record @relation(fields: [recordId], references: [id], onDelete: Cascade)
  recordId String
}

model Person {
  id                    String                 @id @default(cuid())
  fullName              String
  shortName             String
  otherNames            Json?
  born                  DateTime?
  died                  DateTime?
  pronouns              PronounSet             @relation(fields: [pronounsId], references: [id])
  pronounsId            String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  parents               Person[]               @relation("ChildParents")
  children              Person[]               @relation("ChildParents")
  indirectRelationships IndirectRelationship[]
  family                Family                 @relation(fields: [familyId], references: [id], onDelete: Cascade)
  familyId              String
  profileImage          File?                  @relation(fields: [profileImageId], references: [id])
  profileImageId        String?
  userCreated           User                   @relation(fields: [userCreatedId], references: [id])
  userCreatedId         String
}

model PronounSet {
  id         String   @id @default(cuid())
  people     Person[]
  subject    String
  object     String
  possessive String
  family     Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  familyId   String
}

model IndirectRelationship {
  id                 String           @id @default(cuid())
  relationshipType   RelationshipType @relation(fields: [relationshipTypeId], references: [id])
  relationshipTypeId String
  people             Person[]
  family             Family           @relation(fields: [familyId], references: [id], onDelete: Cascade)
  familyId           String
}

model RelationshipType {
  id                    String                 @id @default(cuid())
  name                  String
  indirectRelationships IndirectRelationship[]
  family                Family                 @relation(fields: [familyId], references: [id], onDelete: Cascade)
  familyId              String
}

model Collection {
  id            String       @id @default(cuid())
  name          String
  family        Family       @relation(fields: [familyId], references: [id], onDelete: Cascade)
  familyId      String
  children      Collection[] @relation("collectionHierarchy")
  parent        Collection?  @relation("collectionHierarchy", fields: [parentId], references: [id])
  parentId      String?
  records       Record[]
  userCreated   User         @relation(fields: [userCreatedId], references: [id])
  userCreatedId String
}

model Setting {
  id      String @id @default(cuid())
  context String @default("general")
  name    String
  value   String
}

model Permission {
  id           String @id @default(cuid())
  userId       String
  resourceId   String
  resourceType String
  permission   String
  type         String
}
